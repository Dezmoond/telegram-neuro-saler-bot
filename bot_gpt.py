import asyncio
import logging
import os
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode

from config import BOT_TOKEN, DIALOGS_FOLDER, OPENAI_API_KEY
from neuro_salesman_gpt import NeuroSalesmanGPT
from dialog_logger import DialogLogger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–π—Ä–æ–ø—Ä–æ–¥–∞–∂–Ω–∏–∫–∞ —Å GPT –∏ –ª–æ–≥–≥–µ—Ä–∞
neuro_salesman = NeuroSalesmanGPT(api_key=OPENAI_API_KEY)
dialog_logger = DialogLogger(DIALOGS_FOLDER)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
active_dialogs = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –æ—Ç–∑—ã–≤
waiting_for_feedback = {}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º–∞—É—Ç–∞
TIMEOUT_MINUTES = 10
CLEANUP_INTERVAL_SECONDS = 60  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∏–∞–ª–æ–≥–∞
def get_stop_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="stop_dialog")]
    ])
    return keyboard

@dp.callback_query(lambda c: c.data == "stop_dialog")
async def process_stop_dialog_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∏–∞–ª–æ–≥–∞"""
    user_id = callback_query.from_user.id
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
    json_filepath, docx_filepath = dialog_logger.finish_dialog(user_id, reason="button_stop")
    if json_filepath:
        logger.info(f"–î–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞–≤–µ—Ä—à–µ–Ω —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {json_filepath}")
    if docx_filepath:
        logger.info(f"DOCX —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ–∑–¥–∞–Ω: {docx_filepath}")
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
    if user_id in active_dialogs:
        del active_dialogs[user_id]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∑—ã–≤
    await callback_query.message.answer("üéØ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞:")
    waiting_for_feedback[user_id] = True
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback_query.answer("–î–∏–∞–ª–æ–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


async def cleanup_inactive_dialogs():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤"""
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
            inactive_users = dialog_logger.get_inactive_dialogs(TIMEOUT_MINUTES)
            
            for user_id in inactive_users:
                if user_id in active_dialogs:
                    logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (—Ç–∞–π–º–∞—É—Ç {TIMEOUT_MINUTES} –º–∏–Ω—É—Ç)")
                    
                    # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
                    json_filepath, docx_filepath = dialog_logger.finish_dialog(user_id, reason="timeout")
                    if json_filepath:
                        logger.info(f"–î–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {json_filepath}")
                    if docx_filepath:
                        logger.info(f"DOCX —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ–∑–¥–∞–Ω: {docx_filepath}")
                    
                    # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
                    del active_dialogs[user_id]
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∑—ã–≤
                    try:
                        await bot.send_message(
                            user_id, 
                            f"–î–∏–∞–ª–æ–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ({TIMEOUT_MINUTES} –º–∏–Ω—É—Ç). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞:"
                        )
                        waiting_for_feedback[user_id] = True
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
            # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            await asyncio.sleep(CLEANUP_INTERVAL_SECONDS)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ –æ—á–∏—Å—Ç–∫–∏: {e}")
            await asyncio.sleep(CLEANUP_INTERVAL_SECONDS)

@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_text = """–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º—Ç–∞ –Ω–µ–π—Ä–æ–ø—Ä–æ–¥–∞–∂–Ω–∏–∫–∞, –ø—Ä–æ–≤–µ–¥–∏—Ç–µ —Å –±–æ—Ç–æ–º —Ä–æ–ª–µ–≤–æ–π –¥–∏–∞–ª–æ–≥ –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –≤—ã—Å—Ç—É–ø–∞–µ—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ HR —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –∏–ª–∏ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –∫–∞–¥—Ä–æ–≤. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –°–¢–û–ü –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥'. –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞, —á—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –∏–ª–∏ –∫–∞–∫–∏–µ –±–æ—Ç –¥–æ–ø—É—Å—Ç–∏–ª –æ—à–∏–±–∫–∏. –ù–∞—á–Ω–µ–º –¥–∏–∞–ª–æ–≥ —á–µ—Ä–µ–∑ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥!"""
    
    await message.answer(welcome_text, reply_markup=get_stop_keyboard())
    
    # –û—Ç–º–µ—á–∞–µ–º –Ω–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞
    active_dialogs[user_id] = True
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    neuro_salesman.reset_conversation(user_id)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–µ–π—Ä–æ–ø—Ä–æ–¥–∞–∂–Ω–∏–∫–∞
    first_message = """–ü—Ä–∏–≤–µ—Ç! üëã

–û—Ç–ª–∏—á–Ω–æ, —á—Ç–æ –≤—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ ‚Äî —ç—Ç–æ —É–∂–µ –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –Ω–∞–π–º–∞! 

–°–µ–π—á–∞—Å —Å–∞–º–æ–µ –≤—Ä–µ–º—è –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å AI-—Ä–µ–∫—Ä—É—Ç–µ—Ä–∞ –ø–æ–¥ –≤–∞—à–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏. –Ø –∑–∞–¥–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –±—ã—Å—Ç—Ä—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî –Ω–µ "–¥–ª—è –≥–∞–ª–æ—á–∫–∏", –∞ —á—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å —Å–∞–º—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∑–∞—Ç—Ä–∞—Ç –∏–ª–∏ –ø–µ—Ä–µ–≥—Ä—É–∑–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º.

–ö–∞–∫ –ø—Ä–æ—à–µ–ª –≤–∞—à –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥, –≤—Å–µ –ª–∏ —Ñ—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å?"""
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–µ–π—Ä–æ–ø—Ä–æ–¥–∞–∂–Ω–∏–∫–∞
    response, agent_communication = neuro_salesman.process_message(user_id, "–Ω–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (response —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    dialog_logger.add_message(user_id, "–Ω–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞", response, agent_communication)
    
    await message.answer(response, reply_markup=get_stop_keyboard())

@dp.message()
async def handle_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id
    user_message = message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –æ—Ç–∑—ã–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in waiting_for_feedback:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤ –≤ DOCX —Ñ–∞–π–ª
        try:
            feedback_saved = dialog_logger.add_feedback_to_docx(user_id, user_message)
            if feedback_saved:
                await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –û–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞.")
            else:
                await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∑—ã–≤, –Ω–æ —Å–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞: {e}")
            await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞, –Ω–æ —Å–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!")
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ—Ç–∑—ã–≤
        del waiting_for_feedback[user_id]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º DOCX —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            docx_filepath = dialog_logger.get_latest_docx_path(user_id)
            if docx_filepath and os.path.exists(docx_filepath):
                with open(docx_filepath, 'rb') as docx_file:
                    await message.answer_document(
                        types.BufferedInputFile(
                            docx_file.read(),
                            filename=f"dialog_{user_id}_{datetime.now().strftime('%Y-%m-%d_%H-%M-%S')}.docx"
                        ),
                        caption="üìÑ –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞ —Å –Ω–µ–π—Ä–æ–ø—Ä–æ–¥–∞–∂–Ω–∏–∫–æ–º (–≤–∫–ª—é—á–∞—è –≤–∞—à –æ—Ç–∑—ã–≤)"
                    )
            else:
                await message.answer("üìÑ DOCX —Ñ–∞–π–ª —Å –∏—Å—Ç–æ—Ä–∏–µ–π –¥–∏–∞–ª–æ–≥–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–∑–∂–µ.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ DOCX —Ñ–∞–π–ª–∞: {e}")
            await message.answer("üìÑ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–∞–π–ª–∞.")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–π—Ç–∏ –ø–µ—Ä–µ–ø–∏—Å–∫—É –µ—â–µ —Ä–∞–∑
        await message.answer("üéØ –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –ø–µ—Ä–µ–ø–∏—Å–∫—É –µ—â–µ —Ä–∞–∑? –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –¥–∏–∞–ª–æ–≥
    if user_id not in active_dialogs:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–ø–∏—Å–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "—Å—Ç–æ–ø"
        if user_message.lower().strip() == "—Å—Ç–æ–ø":
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
            json_filepath, docx_filepath = dialog_logger.finish_dialog(user_id, reason="user_stop")
            if json_filepath:
                logger.info(f"–î–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ –∫–æ–º–∞–Ω–¥–µ '—Å—Ç–æ–ø' –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {json_filepath}")
            if docx_filepath:
                logger.info(f"DOCX —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ–∑–¥–∞–Ω: {docx_filepath}")
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
            if user_id in active_dialogs:
                del active_dialogs[user_id]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∑—ã–≤
            await message.answer("üéØ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞:")
            waiting_for_feedback[user_id] = True
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–µ–π—Ä–æ–ø—Ä–æ–¥–∞–∂–Ω–∏–∫–∞ —Å GPT
        response, agent_communication = neuro_salesman.process_message(user_id, user_message)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (response —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        dialog_logger.add_message(user_id, user_message, response, agent_communication)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–Ω–æ–ø–∫–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        await message.answer(response, reply_markup=get_stop_keyboard())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ª–∏ –¥–∏–∞–ª–æ–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –Ω–∞ –ø–æ–∫—É–ø–∫—É)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–æ "—Å—Ç–æ–ø" –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
        if "—Å—Ç–æ–ø" in response.lower():
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
            json_filepath, docx_filepath = dialog_logger.finish_dialog(user_id, reason="success")
            if json_filepath:
                logger.info(f"–î–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {json_filepath}")
            if docx_filepath:
                logger.info(f"DOCX —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ–∑–¥–∞–Ω: {docx_filepath}")
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
            if user_id in active_dialogs:
                del active_dialogs[user_id]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∑—ã–≤
            await message.answer("üéØ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞:")
            waiting_for_feedback[user_id] = True
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@dp.message(Command("stop"))
async def cmd_stop(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞"""
    user_id = message.from_user.id
    
    # –í—Å–µ–≥–¥–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥, –¥–∞–∂–µ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ active_dialogs
    json_filepath, docx_filepath = dialog_logger.finish_dialog(user_id, reason="manual")
    if json_filepath:
        logger.info(f"–î–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {json_filepath}")
    if docx_filepath:
        logger.info(f"DOCX —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ–∑–¥–∞–Ω: {docx_filepath}")
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∏–∞–ª–æ–≥ –≤ –ª–æ–≥–≥–µ—Ä–µ
        summary = dialog_logger.get_dialog_summary(user_id)
        if summary:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
    if user_id in active_dialogs:
        del active_dialogs[user_id]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∑—ã–≤
    await message.answer("üéØ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞:")
    waiting_for_feedback[user_id] = True

@dp.message(Command("status"))
async def cmd_status(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–∏–∞–ª–æ–≥–∞"""
    user_id = message.from_user.id
    
    if user_id in active_dialogs:
        summary = dialog_logger.get_dialog_summary(user_id)
        if summary:
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            if summary.get('last_activity'):
                from datetime import datetime, timedelta
                last_activity = datetime.fromisoformat(summary['last_activity'])
                time_since_activity = datetime.now() - last_activity
                time_until_timeout = timedelta(minutes=TIMEOUT_MINUTES) - time_since_activity
                
                if time_until_timeout.total_seconds() > 0:
                    minutes_left = int(time_until_timeout.total_seconds() // 60)
                    seconds_left = int(time_until_timeout.total_seconds() % 60)
                    timeout_info = f"‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑: {minutes_left}–º {seconds_left}—Å"
                else:
                    timeout_info = "‚ö†Ô∏è –î–∏–∞–ª–æ–≥ –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
            else:
                timeout_info = "‚è∞ –¢–∞–π–º–∞—É—Ç –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è"
            
            status_text = f"""–°—Ç–∞—Ç—É—Å –¥–∏–∞–ª–æ–≥–∞:
ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {summary['user_id']}
–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {summary['start_time']}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {summary['message_count']}
{timeout_info}"""
            await message.answer(status_text)
        else:
            await message.answer("–î–∏–∞–ª–æ–≥ –∞–∫—Ç–∏–≤–µ–Ω, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    elif user_id in waiting_for_feedback:
        await message.answer("‚è≥ –û–∂–∏–¥–∞–µ—Ç—Å—è –≤–∞—à –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤.")
    else:
        await message.answer("–ê–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω")

@dp.message(Command("profile"))
async def cmd_profile(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    
    profile = neuro_salesman.get_user_profile(user_id)
    if profile:
        profile_text = "üìä –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
        for key, value in profile.items():
            profile_text += f"‚Ä¢ {key}: {value}\n"
        await message.answer(profile_text)
    else:
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω")

@dp.message(Command("history"))
async def cmd_history(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞"""
    user_id = message.from_user.id
    
    history = neuro_salesman.get_conversation_history(user_id)
    if history:
        history_text = "üìù –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:\n"
        for i, msg in enumerate(history[-5:], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
            role = "üë§" if msg["role"] == "user" else "ü§ñ"
            history_text += f"{i}. {role} {msg['content'][:50]}...\n"
        await message.answer(history_text)
    else:
        await message.answer("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø—É—Å—Ç–∞")

@dp.message(Command("reset"))
async def cmd_reset(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset –¥–ª—è —Å–±—Ä–æ—Å–∞ –¥–∏–∞–ª–æ–≥–∞"""
    user_id = message.from_user.id
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
    neuro_salesman.reset_conversation(user_id)
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –∏ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ—Ç–∑—ã–≤
    if user_id in active_dialogs:
        del active_dialogs[user_id]
    if user_id in waiting_for_feedback:
        del waiting_for_feedback[user_id]
    
    await message.answer("–î–∏–∞–ª–æ–≥ —Å–±—Ä–æ—à–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.")

@dp.message(Command("timeout"))
async def cmd_timeout(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /timeout –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ (–∞–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞)"""
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
    saved_files = dialog_logger.cleanup_inactive_dialogs(TIMEOUT_MINUTES)
    
    if saved_files:
        files_text = "\n".join([f"‚Ä¢ {os.path.basename(f)}" for f in saved_files])
        await message.answer(f"‚è∞ –ó–∞–≤–µ—Ä—à–µ–Ω—ã –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏:\n{files_text}")
    else:
        await message.answer("‚è∞ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

@dp.message(Command("finish"))
async def cmd_finish(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /finish –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤"""
    user_id = message.from_user.id
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    json_filepath, docx_filepath = dialog_logger.finish_dialog(user_id, reason="force_finish")
    if json_filepath:
        logger.info(f"–î–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {json_filepath}")
    if docx_filepath:
        logger.info(f"DOCX —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ–∑–¥–∞–Ω: {docx_filepath}")
    else:
        logger.info(f"–î–∏–∞–ª–æ–≥ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
    if user_id in active_dialogs:
        del active_dialogs[user_id]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∑—ã–≤
    await message.answer("üéØ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞:")
    waiting_for_feedback[user_id] = True

@dp.message(Command("debug"))
async def cmd_debug(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /debug –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    user_id = message.from_user.id
    
    debug_info = f"""üîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}
–í active_dialogs: {user_id in active_dialogs}
"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –≤ –ª–æ–≥–≥–µ—Ä–µ
    summary = dialog_logger.get_dialog_summary(user_id)
    if summary:
        debug_info += f"""–í dialog_logger: ‚úÖ
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {summary['message_count']}
–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {summary['start_time']}
"""
    else:
        debug_info += "–í dialog_logger: ‚ùå\n"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É dialogs
    dialogs_count = len([f for f in os.listdir("dialogs") if f.endswith('.json')]) if os.path.exists("dialogs") else 0
    debug_info += f"–§–∞–π–ª–æ–≤ –¥–∏–∞–ª–æ–≥–æ–≤ –≤ –ø–∞–ø–∫–µ: {dialogs_count}"
    
    await message.answer(debug_info)
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
    if active_dialogs:
        inactive_users = dialog_logger.get_inactive_dialogs(TIMEOUT_MINUTES)
        if inactive_users:
            timeout_text = f"‚è∞ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ (–±–æ–ª–µ–µ {TIMEOUT_MINUTES} –º–∏–Ω—É—Ç):\n"
            for uid in inactive_users:
                summary = dialog_logger.get_dialog_summary(uid)
                if summary and summary.get('last_activity'):
                    from datetime import datetime
                    last_activity = datetime.fromisoformat(summary['last_activity'])
                    time_since = datetime.now() - last_activity
                    minutes = int(time_since.total_seconds() // 60)
                    timeout_text += f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid}: {minutes} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥\n"
            await message.answer(timeout_text)
        else:
            await message.answer("–ù–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤")
    else:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å GPT...")
    logger.info(f"–¢–∞–π–º–∞—É—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {TIMEOUT_MINUTES} –º–∏–Ω—É—Ç")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
    asyncio.create_task(cleanup_inactive_dialogs())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)

    asyncio.run(main()) 